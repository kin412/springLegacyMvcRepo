<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- @scheduled 만 사용 시 간단한 설정 -->
	<task:annotation-driven />    
    <context:component-scan base-package="com.kin.batch"/>
    
    <!-- Spring Quartz Start -->
	<!-- Job -->
	<bean id="testJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
	    <property name="targetObject" ref="testQuartzJob" />
	    <!-- 서비스 객체에서 주기적으로 실행될 메소드를 지정합니다. -->
	    <property name="targetMethod" value="testQuartz" />
	    <!-- 동시 실행을 방지합니다. -->
	    <property name="concurrent" value="false" />
	</bean>

	<!-- Trigger -->
	<bean id="testJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="testJob" />
	    <!-- Trigger를 사용하여 1시간 -->
	    <property name="cronExpression" value="0 0 0/1 * * ?" />
	</bean>
    
	<!-- Scheduler -->
	<bean id="testJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
			<!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
			<list><ref bean="testJobTrigger" /></list>
	    </property>
	</bean>
	<!-- Spring Quartz End -->

</beans>
